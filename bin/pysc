import argparse
import pysc.scripts as scripts


def main():
    """Run the tools in py-MeD-seq."""
    # Prepare the argument parser
    parser = argparse.ArgumentParser(
        prog="pytcr",
        description="""Python tools to process Takara ICELL8 TCR datasets.""")
    subparsers = parser.add_subparsers(help="sub-command help")

    # analyse the sites found in the read
    sparser = subparsers.add_parser(
        "demultiplex",
        help="Demultiplex an ICELL8 library")
    sparser.add_argument(
        "-1", "--read_1", dest="read1",
        type=str,
        help="The read 1 FastQ file")
    sparser.add_argument(
        "-2", "--read_2", dest="read2",
        type=str, nargs="?",
        help="The read 2 FastQ file")
    sparser.add_argument(
        "-w", "--well-list", dest="welllist",
        type=str,
        help="The well-list")
    sparser.add_argument(
        "--output-read-1", dest="output_read_1",
        type=str, default="{sample}_{wbc}_{row}_{column}_R1.fastq",
        help="""The output read 1. Note that row,
        column, sample, and wbc can be used as qualifiers""")
    sparser.add_argument(
        "--output-read-2", dest="output_read_2",
        type=str, default="{sample}_{wbc}_{row}_{column}_R2.fastq",
        help="""The output read 2. Note that row,
        column, sample, and wbc can be used as qualifiers""")
    sparser.add_argument(
        "--well-barcode-read", dest="wbc_read",
        type=int, default=1, choices=[1, 2],
        help="The well-barcode read")
    sparser.add_argument(
        "--well-barcode-start", dest="wbc_start",
        type=int, default=0,
        help="The well-barcode start")
    sparser.add_argument(
        "--well-barcode-end", dest="wbc_end",
        type=int, default=10,
        help="The well-barcode end")
    sparser.add_argument(
        "--data-start", dest="data_start",
        type=int, default=14,
        help="The data start")
    sparser.add_argument(
        "--items-in-memory", dest="nitems",
        type=int, default=1000000,
        help="The number of items in memory")
    sparser.set_defaults(func=scripts.demultiplex)

    # Parse the argument and call the scripts
    args = parser.parse_args()
    args.func(args)

if __name__ == "__main__":
    # run the main program loop
    main()